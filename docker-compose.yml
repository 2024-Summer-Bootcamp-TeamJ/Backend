services:
  teamj_backend:
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - '8000:8000'
    depends_on:
      - teamj_db
      - rabbitmq
      - celery_worker
    volumes:
      - './app:/app'
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENSEARCH_URL=${OPENSEARCH_URL}
      - OPENSEARCH_ADMIN=${OPENSEARCH_ADMIN}
      - OPENSEARCH_PASSWORD=${OPENSEARCH_PASSWORD}
      - GPT_MODEL=${GPT_MODEL}
    entrypoint:
      - sh
      - '-c'
      - 'sleep 10 && uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-config /app/log.ini'

  teamj_db:
    image: 'mysql:latest'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      LANG: C.UTF-8
    expose:
      - '3306:3306'
    volumes:
      - './db_data:/var/lib/mysql'

  rabbitmq:
    image: rabbitmq:3
    expose:
      - "5672"
      - "15672"

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    command: celery -A utils.celery_worker worker --loglevel=info
    working_dir: /app
    volumes:
      - ./app/utils:/app/utils
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - rabbitmq

  nginx:
    image: nginx:stable
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - teamj_backend

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - teamj_backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - ./grafana/data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor-example
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro #읽기 전용 데이터 - 루트 파일 시스템
      - /var/run:/var/run:rw #읽기 & 쓰기 - 런타임 데이터
      - /sys:/sys:ro #읽기 전용 데이터 - 커널, 하드웨어, 드라이버 정보 등등
      - /var/lib/docker/:/var/lib/docker:ro #읽기 전용 데이터 - 도커 정보 데이터

    depends_on:
      - prometheus
